# -*- coding: utf-8 -*-
"""ACV_LAB6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Al-BlgiBcXJHvfWk-n6IffwXb0z7nN6_
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
!pip install ultralytics
from ultralytics import YOLO
import tensorflow as tf
from tensorflow.keras.datasets import fashion_mnist

# Task 1.1: Edge-based Segmentation using Canny

def edge_segmentation(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    blurred = cv2.GaussianBlur(image, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    plt.imshow(edges, cmap='gray')
    plt.title("Edge-based Segmentation (Canny)")
    plt.show()

# Task 1.2: Region-based Segmentation using Thresholding

def region_segmentation(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    _, segmented = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
    plt.imshow(segmented, cmap='gray')
    plt.title("Region-based Segmentation")
    plt.show()

# Task 1.3: Hough Transform for Line Detection

def hough_transform(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    edges = cv2.Canny(image, 50, 150)
    lines = cv2.HoughLinesP(edges, 1, np.pi/180, 68, minLineLength=15, maxLineGap=250)
    line_image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv2.line(line_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
    plt.imshow(cv2.cvtColor(line_image, cv2.COLOR_BGR2RGB))
    plt.title("Hough Transform - Line Detection")
    plt.show()

# Task 2.1: Object Detection using YOLO

def yolo_object_detection(image_path):
    yolo = YOLO("yolov8n.pt")
    image = cv2.imread(image_path)
    if image is None:
      print("Error: Image not found or cannot be loaded.")
      return

    results = yolo(image)

    # Save and display results
    for i, result in enumerate(results):
        result.save(f"output_{i}.jpg")  # Save detected images
        img = cv2.imread(f"output_{i}.jpg")
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        plt.title(f"Detection Result {i+1}")
        plt.show()

# Task 2.2: Object Detection using R-CNN (Fashion MNIST)

def train_rcnn():
    (x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()
    x_train, x_test = x_train / 255.0, x_test / 255.0
    model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dense(10, activation='softmax')
    ])
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))
    return model


edge_segmentation("/content/signin-image.jpg")
region_segmentation("/content/signin-image.jpg")
hough_transform("/content/signin-image.jpg")
yolo_object_detection("/content/signin-image.jpg")
train_rcnn()